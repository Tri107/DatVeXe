const TaiXe = require('../models/TaiXe');
const danhSachDiemDanh = new Map();

module.exports = {
  // ðŸ”¹ Láº¥y táº¥t cáº£ tÃ i xáº¿
  getAll: async (req, res, next) => {
    try {
      const data = await TaiXe.getAll();
      res.json(data);
    } catch (err) {
      next(err);
    }
  },

  // ðŸ”¹ Láº¥y tÃ i xáº¿ theo ID
  getById: async (req, res, next) => {
    try {
      const id = req.params.id;
      const item = await TaiXe.getById(id);
      if (!item)
        return res.status(404).json({ message: 'KhÃ´ng tÃ¬m tháº¥y tÃ i xáº¿' });
      res.json(item);
    } catch (err) {
      next(err);
    }
  },

  // ðŸ”¹ ThÃªm tÃ i xáº¿ má»›i
  create: async (req, res, next) => {
    try {
      const result = await TaiXe.create(req.body);
      res.status(201).json(result);
    } catch (err) {
      next(err);
    }
  },

  // ðŸ”¹ Cáº­p nháº­t tÃ i xáº¿
  update: async (req, res, next) => {
    try {
      const id = req.params.id;
      const updated = await TaiXe.update(id, req.body);
      if (!updated)
        return res.status(404).json({ message: 'KhÃ´ng tÃ¬m tháº¥y tÃ i xáº¿' });
      res.json(updated);
    } catch (err) {
      next(err);
    }
  },

  // ðŸ”¹ XÃ³a tÃ i xáº¿
  delete: async (req, res, next) => {
    try {
      const id = req.params.id;
      await TaiXe.delete(id);
      res.json({ message: 'XÃ³a tÃ i xáº¿ thÃ nh cÃ´ng' });
    } catch (err) {
      next(err);
    }
  },

  // ðŸ”¸ Dashboard: ThÃ´ng tin tÃ i xáº¿ + chuyáº¿n hiá»‡n táº¡i
  getDashboard: async (req, res, next) => {
    try {
      const taiXeId = req.params.id;
      const data = await TaiXe.getDashboardData(taiXeId);
      res.json(data);
    } catch (err) {
      next(err);
    }
  },

  // ðŸ”¸ Danh sÃ¡ch chuyáº¿n xe theo tÃ i xáº¿
  getChuyenList: async (req, res, next) => {
    try {
      const taiXeId = req.params.taixe_id;

      const list = await TaiXe.getChuyenListByTaiXe(taiXeId);

      res.json(list);
    } catch (err) {
      console.error("Lá»—i getChuyenList:", err);
      next(err);
    }
  },

  // ðŸ”¸ Chi tiáº¿t chuyáº¿n xe
  getChuyenDetail: async (req, res, next) => {
    try {
      const chuyenId = req.params.chuyen_id;

      const detail = await TaiXe.getChuyenDetail(chuyenId);
      res.json(detail);
    } catch (err) {
      console.error("Lá»—i getChuyenDetail:", err);
      next(err);
    }
  },

  // ðŸ”¸ TÃ¬m tÃ i xáº¿ theo sá»‘ Ä‘iá»‡n thoáº¡i
  getByPhone: async (req, res, next) => {
    try {
      const { sdt } = req.params;
      const taiXe = await TaiXe.getByPhone(sdt);

      if (!taiXe)
        return res.status(404).json({ message: 'KhÃ´ng tÃ¬m tháº¥y tÃ i xáº¿ vá»›i sá»‘ Ä‘iá»‡n thoáº¡i nÃ y' });

      res.json(taiXe);
    } catch (err) {
      next(err);
    }
  },

  // ðŸ”¸ LÆ°u Ä‘iá»ƒm danh táº¡m (cho tÃ i xáº¿ tick "CÃ³ máº·t" / "Váº¯ng")
  diemDanhTam: async (req, res, next) => {
    try {
      const { chuyen_id, ve_id, coMat } = req.body;

      if (!chuyen_id || !ve_id)
        return res.status(400).json({ message: 'Thiáº¿u chuyen_id hoáº·c ve_id' });

      if (!danhSachDiemDanh.has(chuyen_id))
        danhSachDiemDanh.set(chuyen_id, new Map());

      const veMap = danhSachDiemDanh.get(chuyen_id);
      veMap.set(ve_id, !!coMat); // true = cÃ³ máº·t, false = váº¯ng

      res.json({
        message: 'Cáº­p nháº­t tráº¡ng thÃ¡i thÃ nh cÃ´ng',
        data: { chuyen_id, ve_id, coMat },
      });
    } catch (err) {
      next(err);
    }
  },

  // ðŸ”¸ Láº¥y danh sÃ¡ch Ä‘iá»ƒm danh táº¡m cá»§a chuyáº¿n
  getDiemDanhTam: async (req, res, next) => {
    try {
      const { chuyen_id } = req.params;
      const veMap = danhSachDiemDanh.get(Number(chuyen_id)) || new Map();

      const danhSach = Array.from(veMap.entries()).map(([ve_id, coMat]) => ({
        ve_id,
        coMat,
      }));

      res.json({ chuyen_id, danhSach });
    } catch (err) {
      next(err);
    }
  },
};
